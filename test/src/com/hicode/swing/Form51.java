/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hicode.swing;
import com.QLTV.utils.MsgBox;
import com.hicode.swing.InterfaceForm.alertType;
import dao.KhoSachDAO;
import dao.LoaiSachDAO;
import entities.KhoSach;
import entities.LoaiSach;
import java.awt.Color;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.sql.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Cache_NV;
import model.Convert;
import model.ImgTSX;
import model.Util;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
public final class Form51 extends javax.swing.JPanel 
       implements InterfaceForm<KhoSach> {
    /**
     * Creates new form Form5
     */
    public Form51() {
        initComponents();
          this.loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbdpane = new javax.swing.JTabbedPane();
        pnlTable = new javax.swing.JPanel();
        pnlTTSach = new javax.swing.JPanel();
        lblAnh = new javax.swing.JLabel();
        spr1 = new javax.swing.JSeparator();
        lblTenSach = new javax.swing.JLabel();
        lblTacGia = new javax.swing.JLabel();
        txtTSach = new javax.swing.JTextField();
        txtTGia = new javax.swing.JTextField();
        spr2 = new javax.swing.JSeparator();
        spnLoai = new javax.swing.JScrollPane();
        tblLoaiSach = new javax.swing.JTable();
        spnKho = new javax.swing.JScrollPane();
        tblKhoSach = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        txtColsSelected = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        pnlTTSach.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblAnh.setFont(new java.awt.Font("Times New Roman", 2, 12)); // NOI18N
        lblAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAnh.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblAnh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblAnh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        spr1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lblTenSach.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblTenSach.setText("Tên sách:");

        lblTacGia.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblTacGia.setText("Tác giả:");

        javax.swing.GroupLayout pnlTTSachLayout = new javax.swing.GroupLayout(pnlTTSach);
        pnlTTSach.setLayout(pnlTTSachLayout);
        pnlTTSachLayout.setHorizontalGroup(
            pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTTSachLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTGia, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(lblTenSach)
                    .addComponent(lblTacGia)
                    .addComponent(txtTSach, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(spr2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTTSachLayout.setVerticalGroup(
            pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spr1)
            .addGroup(pnlTTSachLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTTSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlTTSachLayout.createSequentialGroup()
                        .addComponent(lblTenSach)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTSach, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTacGia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTGia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spr2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tblLoaiSach.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblLoaiSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LoaiID", "Tên loại sách", "Tủ số"
            }
        ));
        tblLoaiSach.setToolTipText("Loại sách");
        tblLoaiSach.setName("LoaiSach"); // NOI18N
        tblLoaiSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLoaiSachMouseClicked(evt);
            }
        });
        tblLoaiSach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblLoaiSachKeyReleased(evt);
            }
        });
        spnLoai.setViewportView(tblLoaiSach);

        tblKhoSach.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblKhoSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "SachID", "TÊN SÁCH", "NHÀ XUẤT BẢN", "TÁC GIẢ", "SỐ LƯỢNG", "ĐƠN GIÁ", "KỆ SỐ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKhoSach.setToolTipText("Thông tin sách");
        tblKhoSach.setName("KhoSach"); // NOI18N
        tblKhoSach.setRowHeight(20);
        tblKhoSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhoSachMouseClicked(evt);
            }
        });
        tblKhoSach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblKhoSachKeyReleased(evt);
            }
        });
        spnKho.setViewportView(tblKhoSach);

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        txtColsSelected.setText("Selected: ALL");

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spnLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(pnlTTSach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnKho, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addComponent(txtColsSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch)))
                .addContainerGap())
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addGroup(pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtColsSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnKho, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE))
                    .addGroup(pnlTableLayout.createSequentialGroup()
                        .addComponent(pnlTTSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        tbdpane.addTab("XEM THÔNG TIN", pnlTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbdpane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbdpane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (evt.getKeyCode() == 10) {
            this.setKhoLoaiSach();
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tblKhoSachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblKhoSachKeyReleased
        if (!list.isEmpty()) {
            this.colSelected(tblKhoSach, txtColsSelected);
            int k = evt.getKeyCode();
            if (k == 33 || k == 34 || k == 38 || k == 40) {
                this.tblKSachClick();
            }
            this.UpdateStatus();
        }
    }//GEN-LAST:event_tblKhoSachKeyReleased

    private void tblKhoSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhoSachMouseClicked
        if (evt.getClickCount() > 1) {
            this.tbdpane.setSelectedIndex(1);
        } else {
            this.colSelected(tblKhoSach, txtColsSelected);
            this.tblKSachClick();
            this.UpdateStatus();
        }
    }//GEN-LAST:event_tblKhoSachMouseClicked

    private void tblLoaiSachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblLoaiSachKeyReleased
        int k = evt.getKeyCode();
        if (k == 33 || k == 34 || k == 38 || k == 40) {
            this.setKhoLoaiSach();
        }
    }//GEN-LAST:event_tblLoaiSachKeyReleased

    private void tblLoaiSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLoaiSachMouseClicked
        this.setKhoLoaiSach();
    }//GEN-LAST:event_tblLoaiSachMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblAnh;
    private javax.swing.JLabel lblTacGia;
    private javax.swing.JLabel lblTenSach;
    private javax.swing.JPanel pnlTTSach;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JScrollPane spnKho;
    private javax.swing.JScrollPane spnLoai;
    private javax.swing.JSeparator spr1;
    private javax.swing.JSeparator spr2;
    private javax.swing.JTabbedPane tbdpane;
    private javax.swing.JTable tblKhoSach;
    private javax.swing.JTable tblLoaiSach;
    private javax.swing.JTextField txtColsSelected;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTGia;
    private javax.swing.JTextField txtTSach;
    // End of variables declaration//GEN-END:variables
// __________________________________________________________________DATA
    private final ImgTSX img = new ImgTSX(lblAnh,
            "src/icons/book.png", "images/Sach/");
    private DefaultTableModel model = null;
    private List<LoaiSach> listLSach = null;
    private List<KhoSach> list = null;
    private KhoSachDAO dao = null;
    private boolean status = false;
    private int row = -1;

    // __________________________________________________________________PANE_1
    @SuppressWarnings("unchecked")
    private void loadData() {
        //Thay đổi thông tin form
        this.tblKhoSach.setColumnSelectionAllowed(true);
        this.tblKhoSach.setAutoCreateRowSorter(true);

        //Đổ dữ liệu combobox (loại sách bên chỉnh sửa)
        DefaultComboBoxModel<String> cboModel;
        //cboModel = (DefaultComboBoxModel) this.cboLoaiSach.getModel();
       // cboModel.removeAllElements();

        // Dữ liệu bảng loại sách
        this.model = (DefaultTableModel) this.tblLoaiSach.getModel();
        listLSach = new LoaiSachDAO().SelectAllElement();
        String[] first = {"ALL", "Chọn tất cả loại sách", "all"};

        // đổ thông tin bảng loại sách
        model.addRow(first);
        listLSach.forEach((x) -> {
            //cboModel.addElement(x.toString());
            Object[] rowData = {x.getLoaiID(), x.getTenLoai(), x.getTuSo()};
            model.addRow(rowData);
        });
        // _______________________________________ TẢI DỮ LIỆU PANE

        // dữ liệu bảng sách
        dao = new KhoSachDAO();
        this.list = dao.SelectAllElement();
        // đổ thông tin bảng sách
        this.tblLoaiSach.setRowSelectionInterval(0, 0);
        this.fillTable();
    }

    @Override
    public void Insert() {
       
    }

    @Override
    public void update() {
      
        
    }

    @Override
    public void delete() {
    
    }

    @Override
    public int findList(Object key) {
        String findBy = (String) key;
        for (int i = 0; i < list.size(); i++) {
            if (findBy.equalsIgnoreCase(list.get(i).getSachID())) {
                return i;
            }
        }
        return -1;
    }

    public LoaiSach findListIndexOfLoai(String key) {
        int index = findListLoai(key);
        if (index == -1) {
            return null;
        } else {
            return listLSach.get(index);
        }
    }

    public int findListLoai(String key) {
        for (int i = 0; i < listLSach.size(); i++) {
            if (key.equalsIgnoreCase(listLSach.get(i).getLoaiID())) {
                return i;
            }
        }
        return -1;
    }

    @Override
    @SuppressWarnings("deprecation")
    public KhoSach getForm() {
     

        return getForm();

    }

    @Override
    public void setForm(KhoSach data) {
        ImgTSX.width = 150;
        ImgTSX.height = 150;
        img.setFile(data.getHinh(), lblAnh);
        this.txtTSach.setText(data.getTenSach());
        this.txtTGia.setText(data.getTacGia());
    }

    private void setForm2(KhoSach data) {
      
    }

    @Override
    public void clearForm() {
       
    }

    // Trạng thái các fields nhập liệu và nút tương tác
    private void setStatus() {
      
    }

    // Xóa màu nền các fields
    private void clearBgr() {
       
    }

    public void fillTable() {
        this.model = (DefaultTableModel) this.tblKhoSach.getModel();
        this.model.setRowCount(0);

        for (int i = 0; i < list.size();) {
            KhoSach x = list.get(i);
            Object[] rowData = {++i, x.getSachID(), x.getTenSach(), x.getNhaxb(),
                x.getTacGia(), x.getSoLuong(), x.getDonGia(), x.getKeSo()
            };
            model.addRow(rowData);
        }
    }

    @Override
    public boolean validateData(KhoSach data) {

        return true;
    }

    @SuppressWarnings({"deprecation", "deprecation"})
    private void setKhoLoaiSach() {
        // Mặc định tìm theo cột TÊN SÁCH
        if (tblKhoSach.getSelectedColumns().length < 1) {
            int colSelected = findColumnName(tblKhoSach, "TÊN SÁCH");
            tblKhoSach.setColumnSelectionInterval(colSelected, colSelected);
            this.colSelected(tblKhoSach, txtColsSelected);
        }

        // Tạo câu truy vấn
        String colLoaiID = this.tblLoaiSach.getValueAt(
                this.tblLoaiSach.getSelectedRow(),
                this.findColumnName(tblLoaiSach, "LoaiID")
        ).toString();
        String sql, search = txtSearch.getText();
        if (search.length() > 1) {
            search = search.substring(0, search.length() - 2);
        }

        // Sứ lý điều kiện
        if (!colLoaiID.equalsIgnoreCase("all")) {
            sql = this.createSqlFindLike(tblKhoSach, search);
            sql += (sql.lastIndexOf("where") > 0
                    ? "and LoaiID = ? "
                    : " where LoaiID = ?");
            this.list = dao.SelectBySqlElement(sql, colLoaiID); // truy vấn
        } else {
            // All mặc định tìm tên sách
            sql = this.createSqlFindLike(tblKhoSach, search);
            this.list = dao.SelectBySqlElement(sql); // truy vấn "LoaiID = 'All'"
        }

        // Đổ dữ liệu bảng theo loại
        this.fillTable();
    }

    // __________________________________________________________________PANE_2
    private void tblKSachClick() {
        if (list != null) {
            KhoSach data = list.get(row = getIndexOfName());
            this.setForm(data);
            this.setForm2(data); // set form panel 2
        } else {
            System.err.println("list == null!");
        }
    }

    private int getIndexOfName() {
        int rowOf = this.tblKhoSach.getSelectedRow();
        int colOf = this.findColumnName(this.tblKhoSach, "SachID");
        String value = this.tblKhoSach.getValueAt(rowOf, colOf).toString();
        return this.findList(value);
    }

    // Hiển thị thông tin theo vị trí danh sách
  
    // Chỉnh sửa thao tác trên form
    private void UpdateStatus() {
       
    }

    void xuatFile() {
        String[] columns = {"STT", "SachID", "Tên Sách", "Nhà Xuất Bản", "Tác Giả", "Số Lượng", "Đơn Giá", "Kệ Số"};
        JFileChooser excelFileChooser = new JFileChooser();
        excelFileChooser.setDialogTitle("Save as");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlxs");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            FileOutputStream excelFOU = null;
            BufferedOutputStream excelBOU = null;
            XSSFWorkbook excelJTableExporter = null;
            Row row = null;
            Cell cell = null;
            try {
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelSheet = excelJTableExporter.createSheet("JTable Sheet");
                excelSheet.setDefaultColumnWidth(15);
                // xét font cho header 
                XSSFFont headerFont = excelJTableExporter.createFont();
                headerFont.setBold(true); // in đậm
                headerFont.setFontHeightInPoints((short) 14);
                // xét font cho title chính
                XSSFFont titleFont = excelJTableExporter.createFont();
                titleFont.setBold(true);
                titleFont.setFontHeightInPoints((short) 18);
                titleFont.setColor(IndexedColors.BLUE.getIndex());
                //
                XSSFFont tieuDePhuFont = excelJTableExporter.createFont();
                tieuDePhuFont.setBold(true);
                tieuDePhuFont.setFontHeightInPoints((short) 12);
                tieuDePhuFont.setColor(IndexedColors.BLUE.getIndex());
                // cellStyle cua header bảng
                CellStyle headerCellStyle = excelJTableExporter.createCellStyle();
                headerCellStyle.setFont(headerFont);
                headerCellStyle.setFillForegroundColor(IndexedColors.AQUA.getIndex());
                headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                headerCellStyle.setBorderBottom(BorderStyle.MEDIUM);
                headerCellStyle.setBorderTop(BorderStyle.MEDIUM);
                headerCellStyle.setBorderLeft(BorderStyle.MEDIUM);
                headerCellStyle.setBorderRight(BorderStyle.MEDIUM);
                // cellStyle của bảng
                CellStyle tableCellStyle = excelJTableExporter.createCellStyle();
                tableCellStyle.setBorderBottom(BorderStyle.MEDIUM);
                tableCellStyle.setBorderTop(BorderStyle.MEDIUM);
                tableCellStyle.setBorderLeft(BorderStyle.MEDIUM);
                tableCellStyle.setBorderRight(BorderStyle.MEDIUM);
                // test for

                // xét vị trí giá trị cho header bảng
                row = excelSheet.createRow(6);
                for (int i = 0; i < columns.length; i++) {
                    cell = row.createCell(i);
                    cell.setCellValue(columns[i]);
                    cell.setCellStyle(headerCellStyle);
                }
                // xet vị trí giá trị cho bảng
                for (int i = 0; i < tblKhoSach.getRowCount(); i++) {
                    row = excelSheet.createRow(i + 7);
                    for (int j = 0; j < tblKhoSach.getColumnCount(); j++) {
                        cell = row.createCell(j);
                        cell.setCellValue(tblKhoSach.getValueAt(i, j).toString());
                        cell.setCellStyle(tableCellStyle);
                        // xet size cho cot
                        excelSheet.autoSizeColumn(i);
                        excelSheet.autoSizeColumn(i + 1);
                    }
                }

                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(this, "Đã xuất file");
            } catch (Exception e) {
                MsgBox.alert(this, "Có lỗi: " + e.toString());
            } finally {
                try {
                    if (excelBOU != null) {
                        excelBOU.close();
                    }
                    if (excelFOU != null) {
                        excelFOU.close();
                    }
                    if (excelJTableExporter != null) {
                        excelJTableExporter.close();
                    }
                    excelFOU.close();
                } catch (Exception e) {
                    MsgBox.alert(this, "Có lỗi: " + e.toString());
                }
            }
        }
    }
}
